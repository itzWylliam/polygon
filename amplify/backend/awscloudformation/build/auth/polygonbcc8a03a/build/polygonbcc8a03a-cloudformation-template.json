{
  "Description": "{\"createdOn\":\"Mac\",\"createdBy\":\"Amplify\",\"createdWith\":\"12.1.1\",\"stackType\":\"auth-Cognito\",\"metadata\":{}}",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "env": {
      "Type": "String"
    },
    "functionpolygonbcc8a03aDefineAuthChallengeArn": {
      "Type": "String",
      "Default": "functionpolygonbcc8a03aDefineAuthChallengeArn"
    },
    "functionpolygonbcc8a03aDefineAuthChallengeName": {
      "Type": "String",
      "Default": "functionpolygonbcc8a03aDefineAuthChallengeName"
    },
    "functionpolygonbcc8a03aCreateAuthChallengeArn": {
      "Type": "String",
      "Default": "functionpolygonbcc8a03aCreateAuthChallengeArn"
    },
    "functionpolygonbcc8a03aCreateAuthChallengeName": {
      "Type": "String",
      "Default": "functionpolygonbcc8a03aCreateAuthChallengeName"
    },
    "functionpolygonbcc8a03aVerifyAuthChallengeResponseArn": {
      "Type": "String",
      "Default": "functionpolygonbcc8a03aVerifyAuthChallengeResponseArn"
    },
    "functionpolygonbcc8a03aVerifyAuthChallengeResponseName": {
      "Type": "String",
      "Default": "functionpolygonbcc8a03aVerifyAuthChallengeResponseName"
    },
    "identityPoolName": {
      "Type": "String"
    },
    "allowUnauthenticatedIdentities": {
      "Type": "String"
    },
    "resourceNameTruncated": {
      "Type": "String"
    },
    "userPoolName": {
      "Type": "String"
    },
    "autoVerifiedAttributes": {
      "Type": "CommaDelimitedList"
    },
    "mfaConfiguration": {
      "Type": "String"
    },
    "mfaTypes": {
      "Type": "CommaDelimitedList"
    },
    "smsAuthenticationMessage": {
      "Type": "String"
    },
    "smsVerificationMessage": {
      "Type": "String"
    },
    "emailVerificationSubject": {
      "Type": "String"
    },
    "emailVerificationMessage": {
      "Type": "String"
    },
    "defaultPasswordPolicy": {
      "Type": "String"
    },
    "passwordPolicyMinLength": {
      "Type": "String"
    },
    "passwordPolicyCharacters": {
      "Type": "CommaDelimitedList"
    },
    "requiredAttributes": {
      "Type": "CommaDelimitedList"
    },
    "aliasAttributes": {
      "Type": "CommaDelimitedList"
    },
    "userpoolClientGenerateSecret": {
      "Type": "String"
    },
    "userpoolClientRefreshTokenValidity": {
      "Type": "String"
    },
    "userpoolClientWriteAttributes": {
      "Type": "CommaDelimitedList"
    },
    "userpoolClientReadAttributes": {
      "Type": "CommaDelimitedList"
    },
    "userpoolClientLambdaRole": {
      "Type": "String"
    },
    "userpoolClientSetAttributes": {
      "Type": "String"
    },
    "sharedId": {
      "Type": "String"
    },
    "resourceName": {
      "Type": "String"
    },
    "authSelections": {
      "Type": "String"
    },
    "useDefault": {
      "Type": "String"
    },
    "usernameAttributes": {
      "Type": "CommaDelimitedList"
    },
    "userPoolGroupList": {
      "Type": "CommaDelimitedList"
    },
    "serviceName": {
      "Type": "String"
    },
    "usernameCaseSensitive": {
      "Type": "String"
    },
    "useEnabledMfas": {
      "Type": "String"
    },
    "authRoleArn": {
      "Type": "String"
    },
    "unauthRoleArn": {
      "Type": "String"
    },
    "breakCircularDependency": {
      "Type": "String"
    },
    "dependsOn": {
      "Type": "CommaDelimitedList"
    },
    "hostedUI": {
      "Type": "String"
    },
    "hostedUIDomainName": {
      "Type": "String"
    },
    "authProvidersUserPool": {
      "Type": "CommaDelimitedList"
    },
    "hostedUIProviderMeta": {
      "Type": "String"
    },
    "authProviders": {
      "Type": "CommaDelimitedList"
    },
    "thirdPartyAuth": {
      "Type": "String"
    },
    "userPoolGroups": {
      "Type": "String"
    },
    "adminQueries": {
      "Type": "String"
    },
    "triggers": {
      "Type": "String"
    },
    "audiences": {
      "Type": "CommaDelimitedList"
    },
    "oAuthMetadata": {
      "Type": "String"
    },
    "parentStack": {
      "Type": "String"
    },
    "authTriggerConnections": {
      "Type": "CommaDelimitedList"
    },
    "permissions": {
      "Type": "CommaDelimitedList"
    },
    "hostedUIProviderCreds": {
      "Type": "String",
      "NoEcho": true
    },
    "googleClientId": {
      "Type": "String"
    },
    "amazonAppId": {
      "Type": "String"
    }
  },
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    },
    "ShouldOutputAppClientSecrets": {
      "Fn::Equals": [
        {
          "Ref": "userpoolClientGenerateSecret"
        },
        true
      ]
    }
  },
  "Resources": {
    "SNSRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "cognito-idp.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ],
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "polygobcc8a03a_role_external_id"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": "*"
                }
              ]
            },
            "PolicyName": "polygobcc8a03a-sns-policy"
          }
        ],
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "polygobcc8a03a_sns-role",
            {
              "Fn::Join": [
                "",
                [
                  "snsbcc8a03a",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Ref": "AWS::StackName"
                          }
                        ]
                      }
                    ]
                  },
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        }
      }
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AutoVerifiedAttributes": [
          "phone_number"
        ],
        "EnabledMfas": [
          "SMS_MFA"
        ],
        "MfaConfiguration": {
          "Ref": "mfaConfiguration"
        },
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": {
              "Ref": "passwordPolicyMinLength"
            },
            "RequireLowercase": false,
            "RequireNumbers": false,
            "RequireSymbols": false,
            "RequireUppercase": false
          }
        },
        "Schema": [
          {
            "Mutable": true,
            "Name": "email",
            "Required": true
          }
        ],
        "SmsAuthenticationMessage": {
          "Ref": "smsAuthenticationMessage"
        },
        "SmsConfiguration": {
          "ExternalId": "polygobcc8a03a_role_external_id",
          "SnsCallerArn": {
            "Fn::GetAtt": [
              "SNSRole",
              "Arn"
            ]
          }
        },
        "SmsVerificationMessage": {
          "Ref": "smsVerificationMessage"
        },
        "UserAttributeUpdateSettings": {
          "AttributesRequireVerificationBeforeUpdate": [
            "phone_number"
          ]
        },
        "UsernameAttributes": {
          "Ref": "usernameAttributes"
        },
        "UsernameConfiguration": {
          "CaseSensitive": false
        },
        "UserPoolName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            {
              "Ref": "userPoolName"
            },
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "userPoolName"
                  },
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        }
      },
      "DependsOn": [
        "SNSRole"
      ]
    },
    "UserPoolClientWeb": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Ref": "UserPool"
        },
        "ClientName": "polygobcc8a03a_app_clientWeb",
        "ReadAttributes": {
          "Ref": "userpoolClientReadAttributes"
        },
        "RefreshTokenValidity": {
          "Ref": "userpoolClientRefreshTokenValidity"
        },
        "TokenValidityUnits": {
          "RefreshToken": "days"
        },
        "WriteAttributes": {
          "Ref": "userpoolClientWriteAttributes"
        }
      },
      "DependsOn": [
        "UserPool"
      ]
    },
    "UserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Ref": "UserPool"
        },
        "ClientName": "polygobcc8a03a_app_client",
        "GenerateSecret": {
          "Ref": "userpoolClientGenerateSecret"
        },
        "ReadAttributes": {
          "Ref": "userpoolClientReadAttributes"
        },
        "RefreshTokenValidity": {
          "Ref": "userpoolClientRefreshTokenValidity"
        },
        "TokenValidityUnits": {
          "RefreshToken": "days"
        },
        "WriteAttributes": {
          "Ref": "userpoolClientWriteAttributes"
        }
      },
      "DependsOn": [
        "UserPool"
      ]
    },
    "UserPoolClientRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            {
              "Ref": "userpoolClientLambdaRole"
            },
            {
              "Fn::Join": [
                "",
                [
                  "upClientLambdaRolebcc8a03a",
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Ref": "AWS::StackName"
                          }
                        ]
                      }
                    ]
                  },
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        }
      },
      "DependsOn": [
        "UserPoolClient"
      ]
    },
    "UserPoolClientLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nconst identity = new aws.CognitoIdentityServiceProvider();\nexports.handler = (event, context, callback) => {\n  if (event.RequestType == 'Delete') {\n    response.send(event, context, response.SUCCESS, {});\n  }\n  if (event.RequestType == 'Update' || event.RequestType == 'Create') {\n    const params = {\n      ClientId: event.ResourceProperties.clientId,\n      UserPoolId: event.ResourceProperties.userpoolId,\n    };\n    identity\n      .describeUserPoolClient(params)\n      .promise()\n      .then((res) => {\n        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });\n      })\n      .catch((err) => {\n        response.send(event, context, response.FAILED, { err });\n      });\n  }\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "UserPoolClientRole",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Timeout": 300
      },
      "DependsOn": [
        "UserPoolClientRole"
      ]
    },
    "UserPoolClientLambdaPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:DescribeUserPoolClient"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "UserPool",
                  "Arn"
                ]
              }
            }
          ]
        },
        "PolicyName": "polygobcc8a03a_userpoolclient_lambda_iam_policy",
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "UserPoolClientLambda"
      ]
    },
    "UserPoolClientLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "UserPoolClientLambda"
                    }
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": "polygobcc8a03a_userpoolclient_lambda_log_policy",
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "UserPoolClientLambdaPolicy"
      ]
    },
    "UserPoolClientInputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserPoolClientLambda",
            "Arn"
          ]
        },
        "clientId": {
          "Ref": "UserPoolClient"
        },
        "userpoolId": {
          "Ref": "UserPool"
        }
      },
      "DependsOn": [
        "UserPoolClientLogPolicy"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "HostedUICustomResource": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nconst identity = new aws.CognitoIdentityServiceProvider();\nexports.handler = (event, context, callback) => {\n  const userPoolId = event.ResourceProperties.userPoolId;\n  const inputDomainName = event.ResourceProperties.hostedUIDomainName;\n  let deleteUserPoolDomain = (domainName) => {\n    let params = { Domain: domainName, UserPoolId: userPoolId };\n    return identity.deleteUserPoolDomain(params).promise();\n  };\n  if (event.RequestType == 'Delete') {\n    deleteUserPoolDomain(inputDomainName)\n      .then(() => {\n        response.send(event, context, response.SUCCESS, {});\n      })\n      .catch((err) => {\n        console.log(err);\n        response.send(event, context, response.FAILED, { err });\n      });\n  }\n  if (event.RequestType == 'Update' || event.RequestType == 'Create') {\n    let checkDomainAvailability = (domainName) => {\n      let params = { Domain: domainName };\n      return identity\n        .describeUserPoolDomain(params)\n        .promise()\n        .then((res) => {\n          if (res.DomainDescription && res.DomainDescription.UserPool) {\n            return false;\n          }\n          return true;\n        })\n        .catch((err) => {\n          return false;\n        });\n    };\n    let createUserPoolDomain = (domainName) => {\n      let params = { Domain: domainName, UserPoolId: userPoolId };\n      return identity.createUserPoolDomain(params).promise();\n    };\n    identity\n      .describeUserPool({ UserPoolId: userPoolId })\n      .promise()\n      .then((result) => {\n        if (inputDomainName) {\n          if (result.UserPool.Domain === inputDomainName) {\n            return;\n          } else {\n            if (!result.UserPool.Domain) {\n              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {\n                if (isDomainAvailable) {\n                  return createUserPoolDomain(inputDomainName);\n                } else {\n                  throw new Error('Domain not available');\n                }\n              });\n            } else {\n              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {\n                if (isDomainAvailable) {\n                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));\n                } else {\n                  throw new Error('Domain not available');\n                }\n              });\n            }\n          }\n        } else {\n          if (result.UserPool.Domain) {\n            return deleteUserPoolDomain(result.UserPool.Domain);\n          }\n        }\n      })\n      .then(() => {\n        response.send(event, context, response.SUCCESS, {});\n      })\n      .catch((err) => {\n        console.log(err);\n        response.send(event, context, response.FAILED, { err });\n      });\n  }\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "UserPoolClientRole",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Timeout": 300
      },
      "DependsOn": [
        "UserPoolClientRole"
      ]
    },
    "HostedUICustomResourcePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:CreateUserPoolDomain",
                "cognito-idp:DescribeUserPool",
                "cognito-idp:DeleteUserPoolDomain"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "UserPool",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:DescribeUserPoolDomain"
              ],
              "Resource": "*"
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserPool"
              },
              {
                "Ref": "hostedUI"
              }
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "HostedUICustomResource"
      ]
    },
    "HostedUICustomResourceLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "HostedUICustomResource"
                    }
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserPool"
              },
              "hostedUILogPolicy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "HostedUICustomResourcePolicy"
      ]
    },
    "HostedUICustomResourceInputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "HostedUICustomResource",
            "Arn"
          ]
        },
        "hostedUIDomainName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            {
              "Ref": "hostedUIDomainName"
            },
            {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "hostedUIDomainName"
                  },
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "userPoolId": {
          "Ref": "UserPool"
        }
      },
      "DependsOn": [
        "HostedUICustomResourceLogPolicy"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "HostedUIProvidersCustomResource": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nconst identity = new aws.CognitoIdentityServiceProvider();\nexports.handler = (event, context, callback) => {\n  try {\n    const userPoolId = event.ResourceProperties.userPoolId;\n    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);\n    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);\n    if (hostedUIProviderCreds.length === 0) {\n      response.send(event, context, response.SUCCESS, {});\n    }\n    if (event.RequestType == 'Delete') {\n      response.send(event, context, response.SUCCESS, {});\n    }\n    if (event.RequestType == 'Update' || event.RequestType == 'Create') {\n      let getRequestParams = (providerName) => {\n        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);\n        let providerMeta = hostedUIProviderMeta[providerMetaIndex];\n        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);\n        let providerCreds = hostedUIProviderCreds[providerCredsIndex];\n        let requestParams = {\n          ProviderName: providerMeta.ProviderName,\n          UserPoolId: userPoolId,\n          AttributeMapping: providerMeta.AttributeMapping,\n        };\n        if (providerMeta.ProviderName === 'SignInWithApple') {\n          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {\n            requestParams.ProviderDetails = {\n              client_id: providerCreds.client_id,\n              team_id: providerCreds.team_id,\n              key_id: providerCreds.key_id,\n              private_key: providerCreds.private_key,\n              authorize_scopes: providerMeta.authorize_scopes,\n            };\n          } else {\n            requestParams = null;\n          }\n        } else {\n          if (providerCreds.client_id && providerCreds.client_secret) {\n            requestParams.ProviderDetails = {\n              client_id: providerCreds.client_id,\n              client_secret: providerCreds.client_secret,\n              authorize_scopes: providerMeta.authorize_scopes,\n            };\n          } else {\n            requestParams = null;\n          }\n        }\n        return requestParams;\n      };\n      let createIdentityProvider = (providerName) => {\n        let requestParams = getRequestParams(providerName);\n        if (!requestParams) {\n          return Promise.resolve();\n        }\n        requestParams.ProviderType = requestParams.ProviderName;\n        return identity.createIdentityProvider(requestParams).promise();\n      };\n      let updateIdentityProvider = (providerName) => {\n        let requestParams = getRequestParams(providerName);\n        if (!requestParams) {\n          return Promise.resolve();\n        }\n        return identity.updateIdentityProvider(requestParams).promise();\n      };\n      let deleteIdentityProvider = (providerName) => {\n        let params = { ProviderName: providerName, UserPoolId: userPoolId };\n        return identity.deleteIdentityProvider(params).promise();\n      };\n      let providerPromises = [];\n      identity\n        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })\n        .promise()\n        .then((result) => {\n          console.log(result);\n          let providerList = result.Providers.map((provider) => provider.ProviderName);\n          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);\n          hostedUIProviderMeta.forEach((providerMetadata) => {\n            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {\n              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));\n            } else {\n              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));\n            }\n          });\n          providerList.forEach((provider) => {\n            if (providerListInParameters.indexOf(provider) < 0) {\n              providerPromises.push(deleteIdentityProvider(provider));\n            }\n          });\n          return Promise.all(providerPromises);\n        })\n        .then(() => {\n          response.send(event, context, response.SUCCESS, {});\n        })\n        .catch((err) => {\n          console.log(err.stack);\n          response.send(event, context, response.FAILED, { err });\n        });\n    }\n  } catch (err) {\n    console.log(err.stack);\n    response.send(event, context, response.FAILED, { err });\n  }\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "UserPoolClientRole",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Timeout": 300
      },
      "DependsOn": [
        "UserPoolClientRole"
      ]
    },
    "HostedUIProvidersCustomResourcePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:CreateIdentityProvider",
                "cognito-idp:UpdateIdentityProvider",
                "cognito-idp:ListIdentityProviders",
                "cognito-idp:DeleteIdentityProvider"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "UserPool",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:DescribeUserPoolDomain"
              ],
              "Resource": "*"
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserPool"
              },
              "hostedUIProvider"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "HostedUIProvidersCustomResource"
      ]
    },
    "HostedUIProvidersCustomResourceLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "HostedUIProvidersCustomResource"
                    }
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserPool"
              },
              "hostedUIProviderLogPolicy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "HostedUIProvidersCustomResourcePolicy"
      ]
    },
    "HostedUIProvidersCustomResourceInputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "HostedUIProvidersCustomResource",
            "Arn"
          ]
        },
        "hostedUIProviderMeta": {
          "Ref": "hostedUIProviderMeta"
        },
        "hostedUIProviderCreds": {
          "Ref": "hostedUIProviderCreds"
        },
        "userPoolId": {
          "Ref": "UserPool"
        }
      },
      "DependsOn": [
        "HostedUIProvidersCustomResourceLogPolicy"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "OAuthCustomResource": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nconst identity = new aws.CognitoIdentityServiceProvider();\nexports.handler = (event, context, callback) => {\n  try {\n    const userPoolId = event.ResourceProperties.userPoolId;\n    let webClientId = event.ResourceProperties.webClientId;\n    let nativeClientId = event.ResourceProperties.nativeClientId;\n    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);\n    let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);\n    let providerList = hostedUIProviderMeta.map((provider) => provider.ProviderName);\n    providerList.push('COGNITO');\n    if (event.RequestType == 'Delete') {\n      response.send(event, context, response.SUCCESS, {});\n    }\n    if (event.RequestType == 'Update' || event.RequestType == 'Create') {\n      let params = {\n        UserPoolId: userPoolId,\n        AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,\n        AllowedOAuthFlowsUserPoolClient: true,\n        AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,\n        CallbackURLs: oAuthMetadata.CallbackURLs,\n        LogoutURLs: oAuthMetadata.LogoutURLs,\n        SupportedIdentityProviders: providerList,\n      };\n      console.log(params);\n      let updateUserPoolClientPromises = [];\n      params.ClientId = webClientId;\n      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());\n      params.ClientId = nativeClientId;\n      updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());\n      Promise.all(updateUserPoolClientPromises)\n        .then(() => {\n          response.send(event, context, response.SUCCESS, {});\n        })\n        .catch((err) => {\n          console.log(err.stack);\n          response.send(event, context, response.FAILED, { err });\n        });\n    }\n  } catch (err) {\n    console.log(err.stack);\n    response.send(event, context, response.FAILED, { err });\n  }\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "UserPoolClientRole",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Timeout": 300
      },
      "DependsOn": [
        "HostedUICustomResourceInputs",
        "HostedUIProvidersCustomResourceInputs"
      ]
    },
    "OAuthCustomResourcePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:UpdateUserPoolClient"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "UserPool",
                  "Arn"
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserPool"
              },
              "OAuth"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "OAuthCustomResource"
      ]
    },
    "OAuthCustomResourceLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "OAuthCustomResource"
                    }
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "UserPool"
              },
              "OAuthLogPolicy"
            ]
          ]
        },
        "Roles": [
          {
            "Ref": "UserPoolClientRole"
          }
        ]
      },
      "DependsOn": [
        "OAuthCustomResourcePolicy"
      ]
    },
    "OAuthCustomResourceInputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "OAuthCustomResource",
            "Arn"
          ]
        },
        "hostedUIProviderMeta": {
          "Ref": "hostedUIProviderMeta"
        },
        "oAuthMetadata": {
          "Ref": "oAuthMetadata"
        },
        "webClientId": {
          "Ref": "UserPoolClientWeb"
        },
        "nativeClientId": {
          "Ref": "UserPoolClient"
        },
        "userPoolId": {
          "Ref": "UserPool"
        }
      },
      "DependsOn": [
        "OAuthCustomResourceLogPolicy"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "OpenIdLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": {
                    "Fn::If": [
                      "ShouldNotCreateEnvResources",
                      "arn:aws:iam:::role/polygobcc8a03a_openid_pass_role_policy",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:iam:::role/polygobcc8a03a_openid_pass_role_policy-",
                            {
                              "Ref": "env"
                            }
                          ]
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            "PolicyName": "polygobcc8a03a_openid_pass_role_policy"
          }
        ],
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "polygobcc8a03a_openid_lambda_role",
            {
              "Fn::Join": [
                "",
                [
                  "polygobcc8a03a_openid_lambda_role-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        }
      },
      "DependsOn": [
        "UserPoolClientInputs"
      ]
    },
    "OpenIdLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst aws = require('aws-sdk');\nconst iam = new aws.IAM();\nexports.handler = (event, context) => {\n  if (event.RequestType == 'Delete') {\n    response.send(event, context, response.SUCCESS, {});\n  }\n  if (event.RequestType == 'Update' || event.RequestType == 'Create') {\n    const params = {\n      ClientIDList: event.ResourceProperties.clientIdList.split(','),\n      ThumbprintList: ['0000000000000000000000000000000000000000'],\n      Url: event.ResourceProperties.url,\n    };\n    let exists = false;\n    let existingValue;\n    iam\n      .listOpenIDConnectProviders({})\n      .promise()\n      .then((data) => {\n        if (data.OpenIDConnectProviderList && data.OpenIDConnectProviderList.length > 0) {\n          const vals = data.OpenIDConnectProviderList.map((x) => x.Arn);\n          existingValue = vals.find((i) => i.split('/')[1] === params.Url.split('//')[1]);\n          if (!existingValue) {\n            exists = true;\n          }\n        }\n        if (!existingValue) {\n          iam\n            .createOpenIDConnectProvider(params)\n            .promise()\n            .then((data) => {\n              response.send(event, context, response.SUCCESS, {\n                providerArn: data.OpenIDConnectProviderArn,\n                providerIds: params.ClientIDList,\n              });\n            })\n            .catch((err) => {\n              response.send(event, context, response.FAILED, { err });\n            });\n        } else {\n          const findParams = {\n            OpenIDConnectProviderArn: existingValue,\n          };\n          iam\n            .getOpenIDConnectProvider(findParams)\n            .promise()\n            .then((data) => {\n              const audiences = data.ClientIDList;\n              const updateCalls = [];\n              params.ClientIDList.forEach((a) => {\n                if (!audiences.includes(a)) {\n                  const updateParams = {\n                    ClientID: a,\n                    OpenIDConnectProviderArn: existingValue,\n                  };\n                  const prom = iam.addClientIDToOpenIDConnectProvider(updateParams).promise();\n                  updateCalls.push(prom);\n                }\n              });\n              Promise.all(updateCalls)\n                .then(function (values) {\n                  response.send(event, context, response.SUCCESS, { providerArn: existingValue, providerIds: params.ClientIDList });\n                })\n                .catch((err3) => {\n                  response.send(event, context, response.FAILED, { err3 });\n                });\n            })\n            .catch((err2) => {\n              response.send(event, context, response.FAILED, { err2 });\n            });\n        }\n      })\n      .catch((err1) => {\n        response.send(event, context, response.FAILED, { err1 });\n      });\n  }\n};\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "OpenIdLambdaRole",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs16.x",
        "Timeout": 300
      },
      "DependsOn": [
        "OpenIdLambdaRole"
      ]
    },
    "OpenIdLambdaIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iam:CreateOpenIDConnectProvider",
                "iam:GetOpenIDConnectProvider",
                "iam:AddClientIDToOpenIDConnectProvider"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:iam::${account}:oidc-provider/accounts.google.com",
                  {
                    "account": {
                      "Ref": "AWS::AccountId"
                    }
                  }
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "iam:ListOpenIDConnectProviders"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:iam::${account}:oidc-provider/${selector}",
                  {
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "selector": "*"
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": "polygobcc8a03a_openid_lambda_iam_policy",
        "Roles": [
          {
            "Fn::If": [
              "ShouldNotCreateEnvResources",
              "polygobcc8a03a_openid_lambda_role",
              {
                "Fn::Join": [
                  "",
                  [
                    "polygobcc8a03a_openid_lambda_role-",
                    {
                      "Ref": "env"
                    }
                  ]
                ]
              }
            ]
          }
        ]
      },
      "DependsOn": [
        "OpenIdLambda"
      ]
    },
    "OpenIdLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "OpenIdLambda"
                    }
                  }
                ]
              }
            }
          ]
        },
        "PolicyName": "polygobcc8a03a_openid_lambda_log_policy",
        "Roles": [
          {
            "Fn::If": [
              "ShouldNotCreateEnvResources",
              "polygobcc8a03a_openid_lambda_role",
              {
                "Fn::Join": [
                  "",
                  [
                    "polygobcc8a03a_openid_lambda_role-",
                    {
                      "Ref": "env"
                    }
                  ]
                ]
              }
            ]
          }
        ]
      },
      "DependsOn": [
        "OpenIdLambdaIAMPolicy"
      ]
    },
    "OpenIdLambdaInputs": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "OpenIdLambda",
            "Arn"
          ]
        },
        "clientIdList": "304930360290-hia7o82d6gg290pavvsivmi6t5kbg055.apps.googleusercontent.com",
        "url": "https://accounts.google.com"
      },
      "DependsOn": [
        "OpenIdLogPolicy"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "IdentityPool": {
      "Type": "AWS::Cognito::IdentityPool",
      "Properties": {
        "AllowUnauthenticatedIdentities": {
          "Ref": "allowUnauthenticatedIdentities"
        },
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "UserPoolClient"
            },
            "ProviderName": {
              "Fn::Sub": [
                "cognito-idp.${region}.amazonaws.com/${client}",
                {
                  "region": {
                    "Ref": "AWS::Region"
                  },
                  "client": {
                    "Ref": "UserPool"
                  }
                }
              ]
            }
          },
          {
            "ClientId": {
              "Ref": "UserPoolClientWeb"
            },
            "ProviderName": {
              "Fn::Sub": [
                "cognito-idp.${region}.amazonaws.com/${client}",
                {
                  "region": {
                    "Ref": "AWS::Region"
                  },
                  "client": {
                    "Ref": "UserPool"
                  }
                }
              ]
            }
          }
        ],
        "IdentityPoolName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "polygonbcc8a03a_identitypool_bcc8a03a",
            {
              "Fn::Join": [
                "",
                [
                  "polygonbcc8a03a_identitypool_bcc8a03a__",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "OpenIdConnectProviderARNs": [
          {
            "Fn::GetAtt": [
              "OpenIdLambdaInputs",
              "providerArn"
            ]
          }
        ],
        "SupportedLoginProviders": {
          "accounts.google.com": {
            "Ref": "googleClientId"
          },
          "www.amazon.com": {
            "Ref": "amazonAppId"
          }
        }
      },
      "DependsOn": [
        "OpenIdLambdaInputs"
      ]
    },
    "IdentityPoolRoleMap": {
      "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
      "Properties": {
        "IdentityPoolId": {
          "Ref": "IdentityPool"
        },
        "Roles": {
          "unauthenticated": {
            "Ref": "unauthRoleArn"
          },
          "authenticated": {
            "Ref": "authRoleArn"
          }
        }
      },
      "DependsOn": [
        "IdentityPool"
      ]
    }
  },
  "Outputs": {
    "IdentityPoolId": {
      "Description": "Id for the identity pool",
      "Value": {
        "Ref": "IdentityPool"
      }
    },
    "IdentityPoolName": {
      "Value": {
        "Fn::GetAtt": [
          "IdentityPool",
          "Name"
        ]
      }
    },
    "HostedUIDomain": {
      "Value": {
        "Fn::If": [
          "ShouldNotCreateEnvResources",
          {
            "Ref": "hostedUIDomainName"
          },
          {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "hostedUIDomainName"
                },
                {
                  "Ref": "env"
                }
              ]
            ]
          }
        ]
      }
    },
    "OAuthMetadata": {
      "Value": {
        "Ref": "oAuthMetadata"
      }
    },
    "UserPoolId": {
      "Description": "Id for the user pool",
      "Value": {
        "Ref": "UserPool"
      }
    },
    "UserPoolArn": {
      "Description": "Arn for the user pool",
      "Value": {
        "Fn::GetAtt": [
          "UserPool",
          "Arn"
        ]
      }
    },
    "UserPoolName": {
      "Value": {
        "Ref": "userPoolName"
      }
    },
    "AppClientIDWeb": {
      "Description": "The user pool app client id for web",
      "Value": {
        "Ref": "UserPoolClientWeb"
      }
    },
    "AppClientID": {
      "Description": "The user pool app client id",
      "Value": {
        "Ref": "UserPoolClient"
      }
    },
    "AppClientSecret": {
      "Value": {
        "Fn::GetAtt": [
          "UserPoolClientInputs",
          "appSecret"
        ]
      },
      "Condition": "ShouldOutputAppClientSecrets"
    },
    "CreatedSNSRole": {
      "Description": "role arn",
      "Value": {
        "Fn::GetAtt": [
          "SNSRole",
          "Arn"
        ]
      }
    },
    "GoogleWebClient": {
      "Value": {
        "Ref": "googleClientId"
      }
    },
    "AmazonWebClient": {
      "Value": {
        "Ref": "amazonAppId"
      }
    }
  }
}